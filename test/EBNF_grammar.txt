<single_line_comment> ::= <single_line_comment_symbol> ( { <unicode_grapheme> }* | <whitespace> )
<single_line_comment_symbol> ::= ( "#" | "//" )

<multi_line_symbol> ::= <start_multi_line_comment_symbol> ( { <unicode_grapheme> }* | <whitespace> | <new_line> ) <end_multi_line_comment_symbol>
<start_multi_line_comment_symbol> ::= "/*"
<end_multi_line_comment_symbol> ::= "*/"

<assignment_expression> :: = <variable_declaration_keyword> <identifier> [ : <datatype> ] = <primitive> | <expression>

<statement> ::=  ( ( <expression> | <function_call> ) ";" ) | <if_statement> | <while_loop> | <for_loop>
<expression> ::= { ( <binary_expression> ) }* 


<function_declaration> ::= <function_declaration_keyword> <identifier> "(" { <parameter_declaration> [,] }* ")" [ -> <datatype> ] "{" { <statement> }* [ <return_keyword> <expression> ] "}"
<parameter_declaration> ::= <datatype> <identifier>
<function_call> ::= <identifier> "("{ <identifier> [,] }* ")"

<if_statement> ::= <if_keyword> "(" <conditional_expression> | <boolean_primitive> ")" "{" { <statement> }* "}" [ [ <else_keyword> <if_keyword> "{" { <statement> }* "}"] <else_keyword> "{" { statement }* "}" ]
<while_loop> ::= <while_loop_keyword> "(" <conditional_expression> | <boolean_primitive> ")" "{" { <statement> }* "}"
<for_loop> ::= <for_loop_keyword> "(" <assignment_expression> ";" <conditional_expression> ";" <statement> ")" "{" { <statement> }* "}"

<binary_expression> ::= <primitive> <binary_operator> <primitive> | <conditional_expression>
<conditional_expression> ::= <primitive> <comparison_operator> <primitive> 

<identifier> ::= { <unicode_grapheme> }+

<unicode_grapheme> ::= 
<whitespace>
<new_line>

<datatype> ::= <primitive>
<primitive> ::= <integer> | <floating_point> | <boolean_primitive> | <character> | <string>

<boolean_primitive> ::= "ootọ" | "irọ"
<integer> ::= <octal_digit> | <decimal_digit> | <hexadecial_digit>
<floating_point> ::= <decimal_digit> "." <decimal_digit>

<octal_digit> ::= "0o" { ( "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ) }+
<decimal_digit> ::= { ( "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ) }+
<hexadecial_digit> ::= "0x" { ( <decimal_digit> | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" ) }+
<character> - <unicode_grapheme>
<string> - { <character> }+


// Keywords
<variable_declaration_keyword> ::= jẹki
<function_declaration_keyword> ::= iṣẹ
<return_keyword> ::= pada
<if_keyword> ::=  ṣe
<else_keyword> ::= tabi
<while_loop_keyword> ::= nigbati
<for_loop_keyword> ::= fun


// Operators
<operator> ::= <binary_operator> | // Add other operator types


<binary_operator> ::= <arithmetic_operator>
                    | <comparison_operator>


<arithmetic_operator> ::= <addition_operator> 
                | <subtraction_operator> 
                | <multiplication_operator>
                | <division_operator>
                | <modulus_operator>


<comparison_operator> ::= <less_than_operator> 
                | <less_than_equal_operator> 
                | <greater_than_operator>
                | <greater_than_equal_operator>
                | <equals_operator>
                | <not_equals_operator>   


<addition_operator> ::= +
<subtraction_operator> ::= -
<multiplication_operator> ::= *
<division_operator> ::= /
<modulus_operator> ::= %


<less_than_operator> ::= <
<greater_than_operator> ::= >
<less_than_equal_operator> ::= <=
<greater_than_equal_operator> ::= >=
<equals_operator> ::= ==
<not_equals_operator> ::= !=


// Class future updates
<object> ::= <primitive> | <class_object>
<binary_expression> ::= <object> <binary_operator> <object>
<class_declaration> ::== <class_declaration_keyword
<datatype> ::= <primitive> | <class> 
<class_declaration_keyword> ::= 
<binary_expression> ::= <object> <binary_operator> <object> | <conditional_expression>
<conditional_expression> ::= <object> <comparison_operator> <object> 